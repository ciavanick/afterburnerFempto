BIN=./bin
LIB=./lib

# for maxOS
# extra_options=-std=c++17

# the compiler: gcc for C program, define as g++ for C++
CC = g++

# compiler, linker, ... flags:
CC_FLAGS := $(shell root-config --cflags)
CC_FLAGS := -fPIC $(extra_options)
CC_FLAGS_LIB:= $CC_FLAGS
CC_FLAGS_LIB:= -shared -s
LDFLAGS := $(shell root-config --ldflags) -shared
LIBS := $(shell root-config --evelibs)

INCLUDES := -I$(shell root-config --incdir)

START := $(shell rm -rf LinkDef.* LinkDef2.*)

CPP_FILES := $(filter-out C.cpp, $(wildcard C*.cpp))
HEADERS :=  $(filter-out C.h, $(wildcard C*.h))

SRC_MAIN=coalroot.C
OBJ_FILES := $(addprefix ./,$(notdir $(CPP_FILES:.cpp=.o)))
OBJ_MAIN=$(SRC_MAIN:.C=.o)

# the build target executable:
MAIN = $(BIN)/coalroot
LIBRARY = $(LIB)/coal.so

# build the executable (remove LinkDef at the end to avoid conflict in the next "make" call)
all:    clean coalroot librar

# generate dictionary
LinkDef.cpp: $(HEADERS)
	rootcint LinkDef.cpp -c $(INCLUDES) $^ My_LinkDef.h

#build coalroot
coalroot: $(OBJ_FILES) LinkDef.o coalroot.C
	$(CC) $(CC_FLAGS) $(INCLUDES) -o $(MAIN) $(OBJ_FILES) LinkDef.o coalroot.C $(LFLAGS) $(LIBS)

#build library
librar:	$(OBJ_FILES) LinkDef.o
	$(CC) $(CC_FLAGS_LIB) $(INCLUDES) -o $(LIBRARY) $(OBJ_FILES) LinkDef.o $(LFLAGS) $(LIBS)

#compilation commands
.cpp.o:
	$(CC) $(CC_FLAGS) $(INCLUDES) $(DEFINES) -c -o $@ $<

.C.o:
	$(CC) $(CC_FLAGS) $(INCLUDES) $(DEFINES) -c -o $@ $<

# run the first time to build the structure
config:
	@rm -rf bin
	@echo
	@echo "do \"make\""
	@echo
	@echo "set your installation dir \"export PATH_INSTALL=...\""
	@echo
	@echo "do \"make install\" (or, if needed, \"sudo make install\")"
	@echo
	@mkdir bin
	@bash checklib

#clean commands

clean:
	rm -rf LinkDef.* *.o bin/*.exe *~

install:
	cp $(BIN)/*.exe $(PATH_INSTALL)
